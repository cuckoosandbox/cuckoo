[vsphere]

# Host connection parameters. This host can be a standalone ESXi hypervisor,
# or a vCenter host. It must be licensed for vSphere Web API access (the free
# edition of ESXi is insufficient).
#
# NOTE: In order for the full memory dump feature to work, the credentials must
# have permission to access the datastore files for the relevant machine via HTTP,
# otherwise you will see HTTP status errors (Unauthorized) in the Cuckoo log while
# attempting to download the .vmsn or .vmem memory dump file. Consult the VMware
# documentation for more details:
#
# http://pubs.vmware.com/vsphere-60/topic/com.vmware.wssdk.pg.doc/PG_Appx_Http_Access.21.3.html
host = {{ vsphere.vsphere.host }}
port = {{ vsphere.vsphere.port }}
user = {{ vsphere.vsphere.user }}
pwd = {{ vsphere.vsphere.pwd }}

# Specify a comma-separated list of available machines to be used. For each
# specified ID you have to define a dedicated section containing the details
# on the respective machine. (E.g. cuckoo1,cuckoo2,cuckoo3)
machines = {{ vsphere.vsphere.machines }}

# Specify the name of the default network interface that should be used
# when dumping network traffic with tcpdump.
# Example (eth0 is the interface name):
interface = {{ vsphere.vsphere.interface }}

# Turn this on if you have a self-signed certificate on your vSphere host
# and need to work around the stricter PEP-0476 validation in recent
# Python versions
unverified_ssl = {{ vsphere.vsphere.unverified_ssl }}

{% for machine in config("vsphere:vsphere:machines") %}
[{{ machine }}]
# Specify the label name of the current machine as specified on your
# vSphere host.
label = {{ vsphere[machine].label }}

# Specify the operating system platform used by current machine
# [windows/darwin/linux].
platform = {{ vsphere[machine].platform }}

# Please specify the name of the snapshot. This snapshot should be taken
# while the machine is running and the agent started.
snapshot = {{ vsphere[machine].snapshot }}

# Specify the IP address of the current virtual machine. Make sure that the
# IP address is valid and that the host machine is able to reach it. If not,
# the analysis will fail.
ip = {{ vsphere[machine].ip }}

# (Optional) Specify the name of the network interface that should be used
# when dumping network traffic from this machine with tcpdump.
# Example (eth0 is the interface name):
interface = {{ vsphere[machine].interface }}

# (Optional) Specify the IP of the Result Server, as your virtual machine sees it.
# The Result Server will always bind to the address and port specified in cuckoo.conf,
# however you could set up your virtual network to use NAT/PAT, so you can specify here
# the IP address for the Result Server as your machine sees it. If you don't specify an
# address here, the machine will use the default value from cuckoo.conf.
# NOTE: if you set this option you have to set result server IP to 0.0.0.0 in cuckoo.conf.
# Example:
resultserver_ip = {{ vsphere[machine].resultserver_ip }}

# (Optional) Specify the port for the Result Server, as your virtual machine sees it.
# The Result Server will always bind to the address and port specified in cuckoo.conf,
# however you could set up your virtual network to use NAT/PAT, so you can specify here
# the port for the Result Server as your machine sees it. If you don't specify a port
# here, the machine will use the default value from cuckoo.conf.
# Example:
resultserver_port = {{ vsphere[machine].resultserver_port }}

# (Optional) Set your own tags. These are comma separated and help to identify
# specific VMs. You can run samples on VMs with tag you require.
# Note that the 64_bit tag is currently special.  For submitted 64-bit PE files,
# the 64_bit tag will automatically be added, forcing them to be run on a 64-bit
# VM.  For this reason, make sure all 64-bit VMs have the 64_bit tag.
tags = {{ vsphere[machine].tags }}

# (Optional) Specify the OS profile to be used by volatility for this
# virtual machine. This will override the guest_profile variable in
# memory.conf which solves the problem of having multiple types of VMs
# and properly determining which profile to use.
osprofile = {{ vsphere[machine].osprofile }}
{% endfor %}
