# Enable or disable the available processing modules [yes/no].
# If you add a custom processing module to your Cuckoo setup, you have to add
# a dedicated entry in this file, or it won't be executed.
# You can also add additional options under the section of your module and
# they will be available in your Python class.

[analysisinfo]
enabled = {{ processing.analysisinfo.enabled }}

[apkinfo]
enabled = {{ processing.apkinfo.enabled }}
# Decompiling dex files with androguard in a heavy operation. For large dex
# files it can really take quite a while - it is recommended to limit to a
# certain filesize.
decompilation_threshold = {{ processing.apkinfo.decompilation_threshold }}

[baseline]
enabled = {{ processing.baseline.enabled }}

[behavior]
enabled = {{ processing.behavior.enabled }}

[buffer]
enabled = {{ processing.buffer.enabled }}

[debug]
enabled = {{ processing.debug.enabled }}

[droidmon]
enabled = {{ processing.droidmon.enabled }}

[dropped]
enabled = {{ processing.dropped.enabled }}

[dumptls]
enabled = {{ processing.dumptls.enabled }}

[extracted]
enabled = {{ processing.extracted.enabled }}

[googleplay]
enabled = {{ processing.googleplay.enabled }}
android_id = {{ processing.googleplay.android_id }}
google_login = {{ processing.googleplay.google_login }}
google_password = {{ processing.googleplay.google_password }}

[memory]
# Create a memory dump of the entire Virtual Machine. This memory dump will
# then be analyzed using Volatility to locate interesting events that can be
# extracted from memory.
enabled = {{ processing.memory.enabled }}

[misp]
enabled = {{ processing.misp.enabled }}
url = {{ processing.misp.url }}
apikey = {{ processing.misp.apikey }}

# Maximum amount of IOCs to look up (hard limit).
maxioc = {{ processing.misp.maxioc }}

[network]
enabled = {{ processing.network.enabled }}

# Allow domain whitelisting
whitelist_dns = {{ processing.network.whitelist_dns }}

# Allow DNS responses from your configured DNS server for whitelisting to
# deactivate when responses come from some other DNS
# Can be also multiple like : 8.8.8.8,8.8.4.4
allowed_dns = {{ processing.network.allowed_dns }}

[procmemory]
# Enables the creation of process memory dumps for each analyzed process right
# before they terminate themselves or right before the analysis finishes.
enabled = {{ processing.procmemory.enabled }}
# It is possible to load these process memory dumps in IDA Pro through the
# generation of IDA Python-based script files. Although currently symbols and
# such are not properly recovered, it is still nice to get a quick look at
# specific memory addresses of a process.
idapro = {{ processing.procmemory.idapro }}
# Extract executable images from this process memory dump. This allows us to
# relatively easily extract injected executables.
extract_img = {{ processing.procmemory.extract_img }}
# Also extract DLL files from the process memory dump.
extract_dll = {{ processing.procmemory.extract_dll }}
# Delete process memory dumps after analysis to save disk space.
dump_delete = {{ processing.procmemory.dump_delete }}

[procmon]
# Enable procmon processing. This only takes place when the "procmon=1" option
# is set for an analysis.
enabled = {{ processing.procmon.enabled }}

[screenshots]
enabled = {{ processing.screenshots.enabled }}
# Set to the actual tesseract path (i.e., /usr/bin/tesseract or similar)
# rather than "no" to enable OCR analysis of screenshots.
# Note: doing OCR on the screenshots is a rather slow process.
tesseract = {{ processing.screenshots.tesseract }}

[snort]
enabled = {{ processing.snort.enabled }}
# Following are various configurable settings. When in use of a recent 2.9.x.y
# version of Snort there is no need to change any of the following settings as
# they represent the defaults.
#
snort = {{ processing.snort.snort }}
conf = {{ processing.snort.conf }}

[static]
enabled = {{ processing.static.enabled }}
# On bigger PDF files PeePDF may take a substantial amount of time to perform
# static analysis of PDF files, with times of over an hour per file estimated
# in production. This option will by default limit the maximum processing time
# to one minute, but this may be adjusted accordingly. Note that if the timeout
# is hit, no static analysis results through PeePDF will be available.
pdf_timeout = {{ processing.static.pdf_timeout }}

[strings]
enabled = {{ processing.strings.enabled }}

[suricata]
enabled = {{ processing.suricata.enabled }}

# Following are various configurable settings. When in use of a recent version
# of Suricata there is no need to change any of the following settings as they
# represent the defaults.
suricata = {{ processing.suricata.suricata }}
conf = {{ processing.suricata.conf }}
eve_log =  {{ processing.suricata.eve_log }}
files_log = {{ processing.suricata.files_log }}
files_dir = {{ processing.suricata.files_dir }}

# By specifying the following line our processing module can use the socket
# mode in Suricata. This is quite the performance improvement as instead of
# having to load all the Suricata rules for each time the processing module is
# ran (i.e., for every task), the rules are only loaded once and then we talk
# to its API. This does require running Suricata as follows or similar;
# "suricata --unix-socket -D".
# (Please find more information in utils/suricata.sh for now).
# socket = /var/run/suricata/cuckoo.socket
socket = {{ processing.suricata.socket }}

[targetinfo]
enabled = {{ processing.targetinfo.enabled }}

[virustotal]
enabled = {{ processing.virustotal.enabled }}
# How much time we can wait to establish VirusTotal connection and get the
# report.
timeout = {{ processing.virustotal.timeout }}
# Enable this option if you want to submit files to VirusTotal not yet available
# in their database.
# NOTE: if you are dealing with sensitive stuff, enabling this option you could
# leak some files to VirusTotal.
scan = {{ processing.virustotal.scan }}
# Add your VirusTotal API key here. The default API key, kindly provided
# by the VirusTotal team, should enable you with a sufficient throughput
# and while being shared with all our users, it shouldn't affect your use.
key = {{ processing.virustotal.key }}

[irma]
enabled = {{ processing.irma.enabled }}
# IRMA @ github : https://github.com/quarkslab/irma
# How much time we can wait to establish IRMA connection and get the report.
timeout = {{ processing.irma.timeout }}
# Enable this option if you want to submit files to IRMA not yet available.
scan = {{ processing.irma.scan }}
# Force scan of submitted files
force = {{ processing.irma.force }}
# URL to your IRMA installation
# For example : https://your.irma.host
url = {{ processing.irma.url }}

[boxjs]
enabled = {{ processing.boxjs.enabled }}
timeout = {{ processing.boxjs.timeout }}
url = {{ processing.boxjs.url }}
